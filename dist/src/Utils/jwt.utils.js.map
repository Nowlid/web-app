{"version":3,"file":"jwt.utils.js","sourceRoot":"","sources":["../../../src/Utils/jwt.utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AAEjC,+CAA4C;AAE5C,MAAM,CAAC,MAAM,EAAE,CAAC;AAMhB,SAAgB,iBAAiB,CAAC,IAAU;IAC1C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC;QAAE,OAAO;IAC5C,OAAO,IAAA,mBAAI,EACT;QACE,MAAM,EAAE,IAAI,CAAC,EAAE;KAChB,EACD,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAC9B;QACE,SAAS,EAAE,IAAI;KAChB,CACF,CAAC;AACJ,CAAC;AAXD,8CAWC;AAED,SAAgB,qBAAqB,CAAC,IAAU,EAAE,IAAY;IAC5D,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC;QAAE,OAAO;IAC5C,OAAO,IAAA,mBAAI,EACT;QACE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE;QAC5C,IAAI;QACJ,MAAM,EAAE,IAAI,CAAC,EAAE;KAChB,EACD,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAC/B,CAAC;AACJ,CAAC;AAVD,sDAUC;AAED,SAAgB,aAAa,CAAC,KAAa;IACzC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC;QAAE,OAAO;IAC5C,IAAI;QACF,MAAM,QAAQ,GAAG,IAAA,qBAAM,EAAC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAC/D,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAChC,OAAO,QAAQ,CAAC;SACjB;KACF;IAAC,OAAO,GAAG,EAAE;KAEb;IACD,OAAO;AACT,CAAC;AAXD,sCAWC","sourcesContent":["import * as dotenv from 'dotenv';\nimport type { JwtPayload } from 'jsonwebtoken';\nimport { sign, verify } from 'jsonwebtoken';\n\ndotenv.config();\n\ninterface User {\n  id: number;\n}\n\nexport function generateTokenUser(user: User): string | undefined {\n  if (!process.env['JWT_SIGN_SECRET']) return;\n  return sign(\n    {\n      userId: user.id\n    },\n    process.env['JWT_SIGN_SECRET'],\n    {\n      expiresIn: '1h'\n    }\n  );\n}\n\nexport function generateValidateToken(user: User, type: string): string | undefined {\n  if (!process.env['JWT_SIGN_SECRET']) return;\n  return sign(\n    {\n      exp: Math.floor(Date.now() / 1000) + 10 * 60,\n      type,\n      userId: user.id\n    },\n    process.env['JWT_SIGN_SECRET']\n  );\n}\n\nexport function validateToken(token: string): JwtPayload | undefined {\n  if (!process.env['JWT_SIGN_SECRET']) return;\n  try {\n    const jwtToken = verify(token, process.env['JWT_SIGN_SECRET']);\n    if (typeof jwtToken !== 'string') {\n      return jwtToken;\n    }\n  } catch (err) {\n    /* empty */\n  }\n  return;\n}\n"]}